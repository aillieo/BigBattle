//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ClientContext {

    public ClientEntity timeEntity { get { return GetGroup(ClientMatcher.Time).GetSingleEntity(); } }
    public BigBattle.Client.TimeComponent time { get { return timeEntity.time; } }
    public bool hasTime { get { return timeEntity != null; } }

    public ClientEntity SetTime(float newValue) {
        if (hasTime) {
            throw new Entitas.EntitasException("Could not set Time!\n" + this + " already has an entity with BigBattle.Client.TimeComponent!",
                "You should check if the context already has a timeEntity before setting it or use context.ReplaceTime().");
        }
        var entity = CreateEntity();
        entity.AddTime(newValue);
        return entity;
    }

    public void ReplaceTime(float newValue) {
        var entity = timeEntity;
        if (entity == null) {
            entity = SetTime(newValue);
        } else {
            entity.ReplaceTime(newValue);
        }
    }

    public void RemoveTime() {
        timeEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ClientEntity {

    public BigBattle.Client.TimeComponent time { get { return (BigBattle.Client.TimeComponent)GetComponent(ClientComponentsLookup.Time); } }
    public bool hasTime { get { return HasComponent(ClientComponentsLookup.Time); } }

    public void AddTime(float newValue) {
        var index = ClientComponentsLookup.Time;
        var component = (BigBattle.Client.TimeComponent)CreateComponent(index, typeof(BigBattle.Client.TimeComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceTime(float newValue) {
        var index = ClientComponentsLookup.Time;
        var component = (BigBattle.Client.TimeComponent)CreateComponent(index, typeof(BigBattle.Client.TimeComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveTime() {
        RemoveComponent(ClientComponentsLookup.Time);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ClientMatcher {

    static Entitas.IMatcher<ClientEntity> _matcherTime;

    public static Entitas.IMatcher<ClientEntity> Time {
        get {
            if (_matcherTime == null) {
                var matcher = (Entitas.Matcher<ClientEntity>)Entitas.Matcher<ClientEntity>.AllOf(ClientComponentsLookup.Time);
                matcher.componentNames = ClientComponentsLookup.componentNames;
                _matcherTime = matcher;
            }

            return _matcherTime;
        }
    }
}
